// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Construction extends ethereum.Event {
  get params(): Construction__Params {
    return new Construction__Params(this);
  }
}

export class Construction__Params {
  _event: Construction;

  constructor(event: Construction) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get config(): ConstructionConfigStruct {
    return changetype<ConstructionConfigStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ConstructionConfigStruct extends ethereum.Tuple {
  get base(): Address {
    return this[0].toAddress();
  }

  get quote(): Address {
    return this[1].toAddress();
  }
}

export class ChainlinkTwoFeedPriceOracle extends ethereum.SmartContract {
  static bind(address: Address): ChainlinkTwoFeedPriceOracle {
    return new ChainlinkTwoFeedPriceOracle(
      "ChainlinkTwoFeedPriceOracle",
      address
    );
  }

  base(): Address {
    let result = super.call("base", "base():(address)", []);

    return result[0].toAddress();
  }

  try_base(): ethereum.CallResult<Address> {
    let result = super.tryCall("base", "base():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quote(): Address {
    let result = super.call("quote", "quote():(address)", []);

    return result[0].toAddress();
  }

  try_quote(): ethereum.CallResult<Address> {
    let result = super.tryCall("quote", "quote():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config_(): ConstructorCallConfig_Struct {
    return changetype<ConstructorCallConfig_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfig_Struct extends ethereum.Tuple {
  get base(): Address {
    return this[0].toAddress();
  }

  get quote(): Address {
    return this[1].toAddress();
  }
}
